---
import Layout from "../../layouts/Layout.astro";
import Banner from "../../components/Banner.astro";
import CallAction from "../../components/CallAction.astro";

const breadcrumbs = [
    { label: "Anasayfa", href: "/"},
    { label: "Galeri", href: "/galeri"},
]

import { galleryImages } from "../../../data/gallery";

const categories = ["Tümü", ...new Set(galleryImages.map(img => img.category))];
---

<Layout
    title="Galeri"
    description="Ateş Oto Kurtarma'nın gerçekleştirdiği başarılı oto çekici ve kurtarma operasyonlarından fotoğraflar. Çalışmalarımızı galerimizden inceleyin."
    jsonLdType="breadcrumb"
    jsonLdData={{ breadcrumbs: breadcrumbs }}
>
    <div class="mt-20">
        <Banner
            title="Galeri"
            description="Gerçekleştirdiğimiz hizmetlerden kareler"
            image="/images/page-banner.jpg"
            breadcrumbs={breadcrumbs} 
        />

        <!-- Galeri Bölümü -->
        <section class="py-16 bg-gray-50">
            <div class="container mx-auto px-4">

                <!-- Kategori Filtreleri -->
                <div class="flex flex-wrap justify-center gap-2 mb-12">
                    {categories.map((category) => (
                        <button 
                            class="category-btn px-6 py-2 rounded-full border-2 border-red-600 text-red-600 hover:bg-red-600 hover:text-white transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2"
                            data-category={category === "Tümü" ? "all" : category}
                        >
                            {category}
                        </button>
                    ))}
                </div>

                <!-- Galeri Grid -->
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4" id="gallery-grid">
                    {galleryImages.map((image) => (
                        <div 
                            class="gallery-item group cursor-pointer bg-white rounded-lg overflow-hidden shadow-md hover:shadow-xl transition-all duration-300 transform hover:-translate-y-2"
                            data-category={image.category}
                            data-image={image.src}
                            data-title={image.title}
                            data-description={image.description}
                        >
                            <div class="relative overflow-hidden">
                                <img 
                                    src={image.src} 
                                    alt={image.alt}
                                    class="w-full h-64 object-cover group-hover:scale-110 transition-transform duration-500"
                                    loading="lazy"
                                />
                                <div class="absolute inset-0 bg-opacity-0 group-hover:bg-opacity-40 transition-all duration-300 flex items-center justify-center">
                                    <div class="text-white opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                                        <svg class="w-12 h-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM10 7v3m0 0v3m0-3h3m-3 0H7"></path>
                                        </svg>
                                    </div>
                                </div>
                            </div>
                            <div class="p-4">
                                <span class="inline-block px-3 py-1 bg-red-100 text-red-800 text-sm rounded-full mb-2">
                                    {image.category}
                                </span>
                                <h3 class="font-semibold text-gray-800 mb-2 group-hover:text-red-600 transition-colors">
                                    {image.title}
                                </h3>
                                <p class="text-gray-600 text-sm line-clamp-2">
                                    {image.description}
                                </p>
                            </div>
                        </div>
                    ))}
                </div>
            </div>
        </section>

        <!-- Modal -->
        <div id="imageModal" class="fixed inset-0 bg-black bg-opacity-75 z-50 hidden items-center justify-center p-4">
            <div class="bg-white rounded-lg max-w-4xl max-h-[90vh] overflow-hidden relative">
                <button 
                    id="closeModal" 
                    class="absolute top-4 right-4 text-gray-500 hover:text-gray-700 z-10 bg-white rounded-full p-2 shadow-lg"
                >
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
                <div class="flex flex-col md:flex-row">
                    <div class="md:w-2/3">
                        <img id="modalImage" src="" alt="" class="w-full h-auto max-h-96 md:max-h-full object-cover">
                    </div>
                    <div class="md:w-1/3 p-6">
                        <h3 id="modalTitle" class="text-2xl font-bold text-gray-800 mb-4"></h3>
                        <p id="modalDescription" class="text-gray-600 leading-relaxed"></p>
                    </div>
                </div>
            </div>
        </div>

        <CallAction />
    </div>

    <script>
        // Kategori filtreleme
        const categoryButtons = document.querySelectorAll('.category-btn');
        const galleryItems = document.querySelectorAll('.gallery-item');

        categoryButtons.forEach(button => {
            button.addEventListener('click', () => {
                // Aktif buton stilini güncelle
                categoryButtons.forEach(btn => {
                    btn.classList.remove('bg-red-600', 'text-white');
                    btn.classList.add('text-red-600');
                });
                button.classList.add('bg-red-600', 'text-white');
                button.classList.remove('text-red-600');

                const category = button.getAttribute('data-category');
                
                galleryItems.forEach(item => {
                    const htmlItem = item as HTMLElement;
                    if (category === 'all' || item.getAttribute('data-category') === category) {
                        htmlItem.style.display = 'block';
                        // Animasyon için
                        setTimeout(() => {
                            htmlItem.style.opacity = '1';
                            htmlItem.style.transform = 'scale(1)';
                        }, 50);
                    } else {
                        htmlItem.style.opacity = '0';
                        htmlItem.style.transform = 'scale(0.8)';
                        setTimeout(() => {
                            htmlItem.style.display = 'none';
                        }, 300);
                    }
                });
            });
        });

        // İlk kategori butonunu aktif yap
        if (categoryButtons.length > 0) {
            const firstButton = categoryButtons[0] as HTMLElement;
            firstButton.click();
        }

        // Modal işlemleri
        const modal = document.getElementById('imageModal');
        const modalImage = document.getElementById('modalImage') as HTMLImageElement;
        const modalTitle = document.getElementById('modalTitle');
        const modalDescription = document.getElementById('modalDescription');
        const closeModal = document.getElementById('closeModal');

        if (modal && modalImage && modalTitle && modalDescription && closeModal) {
            galleryItems.forEach(item => {
                item.addEventListener('click', () => {
                    const imageSrc = item.getAttribute('data-image');
                    const title = item.getAttribute('data-title');
                    const description = item.getAttribute('data-description');

                    if (imageSrc && title && description) {
                        modalImage.src = imageSrc;
                        modalImage.alt = title;
                        modalTitle.textContent = title;
                        modalDescription.textContent = description;
                    }

                    modal.classList.remove('hidden');
                    modal.classList.add('flex');
                    document.body.style.overflow = 'hidden';
                });
            });

            closeModal.addEventListener('click', () => {
                modal.classList.add('hidden');
                modal.classList.remove('flex');
                document.body.style.overflow = 'auto';
            });

            // Modal dışına tıklayınca kapat
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    modal.classList.add('hidden');
                    modal.classList.remove('flex');
                    document.body.style.overflow = 'auto';
                }
            });

            // ESC tuşu ile modal kapat
            document.addEventListener('keydown', (e) => {
                if (e.key === 'Escape' && !modal.classList.contains('hidden')) {
                    modal.classList.add('hidden');
                    modal.classList.remove('flex');
                    document.body.style.overflow = 'auto';
                }
            });
        }
    </script>

    <style>
        .line-clamp-2 {
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }
        
        .gallery-item {
            transition: opacity 0.3s ease, transform 0.3s ease;
        }
    </style>
</Layout>