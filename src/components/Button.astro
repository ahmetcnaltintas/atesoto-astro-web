---
type Variant = 'primary' | 'secondary' | 'outline';
type Size = 'sm' | 'md' | 'lg';

interface ButtonProps {
  variant?: Variant;
  size?: Size;
  href?: string;
  disabled?: boolean;
  target?: string;
  rel?: string;
}
const {
  variant = 'primary',
  size = 'md',
  href,
  disabled = false,
  target,
  rel,
} = Astro.props as ButtonProps

const variants: Record<Variant, string> = {
  primary: 'bg-red-600 text-white hover:bg-red-700',
  secondary: 'bg-gray-200 text-gray-800 hover:bg-gray-300',
  outline: 'border border-red-600 text-red-600 hover:bg-red-50',
}

const sizes: Record<Size, string> = {
  sm: 'px-3 py-1 text-sm',
  md: 'px-5 py-2 text-base',
  lg: 'px-6 py-3 text-lg',
}

const classes = `
  inline-block rounded-md font-semibold focus:outline-none focus:ring-2 focus:ring-red-500
  transition-colors duration-200
  ${variants[variant]}
  ${sizes[size]}
  ${disabled ? 'opacity-50 cursor-not-allowed pointer-events-none' : 'cursor-pointer'}
`.trim()
---

{href ? (
  <a
    href={disabled ? undefined : href}
    class={classes}
    target={target}
    rel={rel}
    aria-disabled={disabled ? 'true' : undefined}
  >
    <slot />
  </a>
) : (
  <button
    class={classes}
    disabled={disabled}
  >
    <slot />
  </button>
)}
